import { NextResponse } from 'next/server';
import { deleteHome, getPriceChangesForHome, getHomes } from '@/lib/firestore';
import { db } from '@/lib/firebase';
import { deleteDoc, doc } from 'firebase/firestore';

export async function POST() {
  try {
    console.log('Starting cleanup of fake KB Home data...');
    
    // Get all homes to find KB Home entries with fake addresses
    const allHomes = await getHomes();
    const kbHomes = allHomes.filter(home => 
      home.builder?.name === 'KB Home' && 
      home.address?.includes('Cunningham Farm Dr') &&
      // These are the fake addresses generated by the scraper
      (home.address.includes('4023 ') || 
       home.address.includes('4025 ') || 
       home.address.includes('4027 ') || 
       home.address.includes('4029 ') || 
       home.address.includes('4031 ') || 
       home.address.includes('4033 '))
    );
    
    console.log(`Found ${kbHomes.length} KB Home entries with fake addresses to clean up`);
    
    let deletedHomes = 0;
    let deletedPriceChanges = 0;
    
    for (const home of kbHomes) {
      console.log(`Cleaning up fake home: ${home.modelName} at ${home.address}`);
      
      // First, delete associated price changes
      const priceChanges = await getPriceChangesForHome(home.id);
      if (priceChanges.length > 0) {
        for (const priceChange of priceChanges) {
          await deleteDoc(doc(db, 'priceChanges', priceChange.id));
        }
        deletedPriceChanges += priceChanges.length;
        console.log(`Deleted ${priceChanges.length} price changes for ${home.address}`);
      }
      
      // Then delete the home itself
      await deleteHome(home.id);
      deletedHomes++;
    }
    
    return NextResponse.json({
      success: true,
      message: `Cleaned up ${deletedHomes} fake KB Home entries and ${deletedPriceChanges} associated price changes`,
      deletedHomes,
      deletedPriceChanges,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error cleaning up fake KB Home data:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to clean up fake KB Home data',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}